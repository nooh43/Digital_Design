/*
 * main.cpp
 *
 *  Created on: Nov 17, 2017
 *      Author: Nasser Alhumood
 */

/* Libraries included */
#include <iostream>
#include "Gates.h"
#include <fstream>
#include <sstream>
using namespace std;

/* Struct */
struct Equation {
	string key;
	string value1;
	string value2;
};

int main() {

	/* Main parameters */
	string command = "default";
	string box;
	string boxName;
	string type;
	string firstInput;
	string secondInput;
	string output;

	/* Welcome Menu */
	cout << "Welcome to the gates calculator. Please select from the following options: " << endl;
	cout << "1. add          // add a new box." << endl;
	cout << "2. view         // view the boxes added by you." << endl;
	cout << "3. equations    // list the equations generated by the application." << endl;
	cout << "4. solve        // show you the sorted result." << endl;
	cout << "5. help         // view this list of commands again." << endl;
	cout << "6. exit         // close this application." << endl << endl;

	/* Starting While loop for a continues program */
	while (command == "default") {

		/* command line */
		cout << "command: ";
		cin >> command;

		/* adding a new gate */
		if (command == "add") {

			/* Naming the box */
			cout << "Please type in your box's details: ";
			cin >> box;

			/* setting up the box's name */
			type = box.substr(0, box.find('('));
			boxName = type;

			/* setting up the inputs */
			firstInput = box.substr(box.find('(') + 1, box.find(',') - box.find('(') - 1);
			secondInput = box.substr(type.length() + firstInput.length() + 2, box.find(',' , (firstInput.length() +  type.length() + 2)) - (type.length() + firstInput.length() + 2));
			output = box.substr(type.length() + firstInput.length() + secondInput.length() + 3, box.length() - (type.length() + firstInput.length() + secondInput.length() + 4));

			/* initial an object */
			Gates boxName(type, firstInput, secondInput, output);
			boxName.Calculate();

			/* Box added - return */
			cout << "added successfully." << endl;
			command = "default";
		}

		/* Printing the gates */
		else if (command == "view") {
			/* Parameters */
			string printedContents = "";

			/* opening printed File */
			ifstream printedF;
			printedF.open("printed.txt", ios::app);

			/* if the file doesn't exist */
			if (!printedF.is_open()) {
				cout << "Sorry, we could not find the equation file." << endl;
				return 1;
			}

			/* Reading the file */
			while (!printedF.eof()) {
				//equationsF >> equationsContents;
				getline(printedF, printedContents);
				if( printedF.good() ) {
					cout << printedContents << endl;
				}
			}

			/* Closing the file */
			printedF.close();
			cout << endl;

			/* return */
			command = "default";
		}

		/* Printing a list of equations */
		else if (command == "equations") {

			/* Parameters */
			string equationsContents = "";

			/* opening printed File */
			ifstream equationsF;
			cout << "Reading the equations... " << endl;
			equationsF.open("equations.txt", ios::app);

			/* if the file doesn't exist */
			if (!equationsF.is_open()) {
				cout << "Sorry, we could not find the equation file." << endl;
				return 1;
			}

			/* Reading the file */
			while (!equationsF.eof()) {
				//equationsF >> equationsContents;
				getline(equationsF, equationsContents);
				if( equationsF.good() ) {
					cout << equationsContents << endl;
				}
			}

			/* Closing the file */
			equationsF.close();
			cout << endl;

			/* return */
			command = "default";

		}

		/* Solving as one function */
		else if (command == "solve") {

			/* Parameters */
			string line;
			char operatorIs='.'; // operation
			int count = 0; // number of equations
			Equation* equation = new Equation[50];
			int columnCount = 0;

			/* Opening File */
			ifstream equationsO;
			equationsO.open("equations.txt");

			/* if the file doesn't exist */
			if (!equationsO.is_open()) {
				cout << "Sorry, we could not find the equation file." << endl;
				return 1;
			}

			/* Getting the data from the equation file */
			while(getline(equationsO, line,'\n') ) {

				/* Streaming to other variables */
				stringstream ss(line);
				columnCount = 0;

				while ( getline(ss, line, ' ') ) {

					columnCount++;

					if (columnCount == 1) {
						equation[count].key = line;
					}

					else if (columnCount == 3) {
						equation[count].value1 = line.substr(0, line.find(operatorIs))[0];
						line = line.substr(line.find(operatorIs)+1, line.length());
						equation[count].value2=line;
					}
				}
				count++;
			}

			/* Closing the file */
			equationsO.close();

			/* Looping the answer */
			int i = 0;
			int j = 0;
			for (i = 0; i <= count; i++) {

				for(j=0;j<i;j++) {

					if (equation[j].key == equation[i].value1) {
						equation[i].value1 = equation[j].value1 + operatorIs + equation[j].value2;
					}

					if (equation[j].key == equation[i].value2) {
						equation[i].value2 = equation[j].value1 + operatorIs + equation[j].value2;
					}
				}
			}

			for (i = 0; i < count; i++) {
				cout << equation[i].key << " = " << equation[i].value1 << operatorIs << equation[i].value2 << endl;
			}


			command = "default";
		}

		/* Help menu */
		else if (command == "help") {
			cout << "1. add          // add a new box." << endl;
			cout << "2. view         // view the boxes added by you." << endl;
			cout << "3. equations    // list the equations generated by the application." << endl;
			cout << "4. solve        // show you the sorted result." << endl;
			cout << "5. help         // view this list of commands again." << endl;
			cout << "6. exit         // close this application." << endl << endl;
			command = "default";
		}

		/* Closing the application */
		else if (command == "exit") {
			cout << "Thank you for using this application, enjoy the rest of your day. Goodbye!" << endl;
		}

		/* wrong input */
		else {
			cout << "sorry! your input was not recognized. Please try again, or type help." << endl << endl;
			command = "default";
		}

	} // while-end

   return 0;
}
